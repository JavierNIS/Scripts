#!/bin/bash

# General variables: You shouldn't edit this parameters too often. If this is 
# your first time using it, then it would be a great idea to check them
readonly _USER="mcuser"
readonly _SPATH="/home/$_USER/mcserver"
readonly _SERVER="forge-1.12.2-14.23.5.2859.jar"
readonly _LOCK="lock"

# Configuration variables: You may edit these according to your needs
# Memory reserver by the virtual machine, the max and min are the same to avoid virtual heap
MALLOC="-Xms12G -Xmx12G"
# Optimization of heap: 
# 	UseG1GC: Uses the garbage collector's G1 option, it helps with systems that use a lot of memory. 
# 	UnlockExperimentalVMOptions: Allows the usage of G1 and G1NewSizePercent.
# 	MaxGCPauseMillis: Max pause time for processes that use garbage collection.
# 	DisableExplicitGC: Ignores System.gc(), so it doesn't change the GC behaviour. 
# 	AlwaysPreTouch: Preloads everything that could be needed.
#	TargetSurvivorRatio: Percentage of memory allocated for survivors. 
#	G1NewSizePercent: Percentage of the young generation. --TODO: Improve translation 
#	G1MaxNewSizePercent: Max size that the young generation can take. 
#	UseLargePagesInMetaspace: Cache CPU optimization using pages of greater size.
ARGS="-XX:+UseG1GC -XX:+UnlockExperimentalVMOptions -XX:MaxGCPauseMillis=100 -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -XX:TargetSurvivorRatio=90 -XX:G1NewSizePercent=50 -XX:G1MaxNewSizePercent=80 -XX:+UseLargePagesInMetaspace"
file="$_SPATH/$_SERVER"
lock="$_SPATH/$_LOCK"
option="x"

# Unlock the process so another one can be made
unlock() {
	rm -f "${lock}"
}
trap unlock EXIT

# Check if this process already exists
if [ -e "${lock}" ]; then
	echo "Una instancia de este script está en ejecución, abortando..." # Translation: One instance of the script is already in execution, aborting...
	exit 1
fi
# If it isn't duplicated, create a lock
touch "${lock}"

echo "Lock creado." # T: Lock created

# Check the user, change it to the user you want to use or comment this part if you don't want any restrictions
if [ "$(whoami)" != "${_USER}" ]; then
	echo "Usuario no permitido, de momento solo ${_USER} es capaz de iniciar el servidor" # T: User not allowed, only ${_USER} is capable of starting the server
	exit 1
fi

# Change to the working path
cd "$_SPATH"

echo "Directory cambiado a $(pwd)" # Directory changed to 

# Checking for the server
if [ ! -f "${file}" ]; then
	echo "No se ha encontrado el servidor en la ruta correcta, información de error:" # Server not found, debug info:
	echo "Path al servidor: ${_SPATH}"
	echo "Version del servidor: ${_SERVER}"
	echo "Path completo: ${file}"
	exit 1
fi

echo "Server encontrado" # Server found

# What do you want to do
# TODO: Change it so it doesn't use tmux, instead, it should make sure that
# that a .service exists
